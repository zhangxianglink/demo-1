// 算术运算符
加减乘除,余数
指数 
7 ** 3
343
自增,自减
++x; x++; --x; x--;
求值运算符(返回本身的值)
+x 
负值运算符
-x

// 比较运算符
== 模糊相等 ,特殊情况太多
0 == []
0 == '0'
0 == '\t'
建议使用=== 
基本数据看值是否相等, 对象看地址是否相等
唯一特例 
NaN === NaN  
false

// 布尔运算符
let c = 99
c > 20 && c > 33 && console.log('last')
&&  返回第一个为false的值,或者最后一个值
c < 20 || c < 33 || console.log('last')
||  返回第一个为true的值,或者最后一个为值

// 二进制运算符
偶数 8 & 1  结果 0
技术 7 & 1  结果 1
取整数(位运算抹除小数部分)
~~ 6.86
6.83 >> 0 
6.83 << 0 
6.83 >>> 0 
6.83 | 0 
//交换数值
[a,b] = [b,a] 
或者
a ^= b
b ^= a
a ^= b

// 点运算符
调用对象属性
如果不是对象,默认转化为封装对象,调用封装对象属性,删除封装对象
//void运算符
void 表达式或语句
执行表达式或语句,返回undefined
// 逗号运算符(返回最后一个逗号的内容)
(1,121,3,6)
6

let f = x => (console.log('x'),x + 1)
f(3)
4

let f = x => (console.log('x'), [1,23,x])
f('002')
(3) [1, 23, "002"]

//运算符优先级
() 优先级最高